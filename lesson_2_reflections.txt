Q: What happens when you initialize a repository? Why do you need to do it?
A: Git creates a new hidden directory .git and stores there the meta-data for all files in the current repo. We have to do it to let Git know which directory to track.

Q: How is the staging area different from the working directory and the repository? What value do you think it offers?
A: Only changes which are assigned to the staging area will be the content of the commit. You can make a lot of differences in the code base and incrementally stage and commit logical parts of the code.

Q: How can you use the staging area to make sure you have one commit per logical change?
A: You can work in the working directory and stage one change into the staging area and commit. After that you can stage and commit another change.

Q: What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A: We can set milestones to some commits to return to this point and reproduce some bugs. Branches can help to experiment with new changes without affecting previous code base.

Q: How do the diagrams help you visualize the branch structure?
A: We can see the history of changes without looking in text-based log for each branch and look for the common commit after them the branches separate.

Q: What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A: We create a new commit which contains the code from these two branches. We represent it that way because the output of the merge is a child of two tips of two branches.

Q: What are the pros and cons of Git’s automatic merging vs. always doing merges manually?
A: 	Pros: New lines which weren't there are just added without any manual work by auto-merge. On the otherhand git indicates a conflict if there are changes on the same spot.
	Cons: Auto merge cannot detect two same functions (with same functionality) with different names.